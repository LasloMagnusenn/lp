{
	"compiler": {
		"version": "0.8.17+commit.8df45f5f"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [],
				"name": "ApprovalCallerNotOwnerNorApproved",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ApprovalQueryForNonexistentToken",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "BalanceQueryForZeroAddress",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InvalidQueryRange",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "MintERC2309QuantityExceedsLimit",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "MintToZeroAddress",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "MintZeroQuantity",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					}
				],
				"name": "OperatorNotAllowed",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "OwnerQueryForNonexistentToken",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "OwnershipNotInitializedForExtraData",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "TransferCallerNotOwnerNorApproved",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "TransferFromIncorrectOwner",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "TransferToNonERC721ReceiverImplementer",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "TransferToZeroAddress",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "URIQueryForNonexistentToken",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "approved",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "Approval",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "approved",
						"type": "bool"
					}
				],
				"name": "ApprovalForAll",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "fromTokenId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "toTokenId",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "ConsecutiveTransfer",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "Transfer",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "OPERATOR_FILTER_REGISTRY",
				"outputs": [
					{
						"internalType": "contract IOperatorFilterRegistry",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "approve",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "balanceOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "cost",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "explicitOwnershipOf",
				"outputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "addr",
								"type": "address"
							},
							{
								"internalType": "uint64",
								"name": "startTimestamp",
								"type": "uint64"
							},
							{
								"internalType": "bool",
								"name": "burned",
								"type": "bool"
							},
							{
								"internalType": "uint24",
								"name": "extraData",
								"type": "uint24"
							}
						],
						"internalType": "struct IERC721A.TokenOwnership",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256[]",
						"name": "tokenIds",
						"type": "uint256[]"
					}
				],
				"name": "explicitOwnershipsOf",
				"outputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "addr",
								"type": "address"
							},
							{
								"internalType": "uint64",
								"name": "startTimestamp",
								"type": "uint64"
							},
							{
								"internalType": "bool",
								"name": "burned",
								"type": "bool"
							},
							{
								"internalType": "uint24",
								"name": "extraData",
								"type": "uint24"
							}
						],
						"internalType": "struct IERC721A.TokenOwnership[]",
						"name": "",
						"type": "tuple[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "getApproved",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "hiddenMetadataUri",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					}
				],
				"name": "isApprovedForAll",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "maxMintAmountPerTx",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "maxSupply",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "merkleRoot",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_mintAmount",
						"type": "uint256"
					}
				],
				"name": "mint",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_mintAmount",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "_receiver",
						"type": "address"
					}
				],
				"name": "mintForAddress",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_mintAmount",
						"type": "uint256"
					}
				],
				"name": "mintFromGame",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "name",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "notTransferable",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "ownerOf",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "paused",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "revealed",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "safeTransferFrom",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "_data",
						"type": "bytes"
					}
				],
				"name": "safeTransferFrom",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "approved",
						"type": "bool"
					}
				],
				"name": "setApprovalForAll",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_cost",
						"type": "uint256"
					}
				],
				"name": "setCost",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "_hiddenMetadataUri",
						"type": "string"
					}
				],
				"name": "setHiddenMetadataUri",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_maxMintAmountPerTx",
						"type": "uint256"
					}
				],
				"name": "setMaxMintAmountPerTx",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "_merkleRoot",
						"type": "bytes32"
					}
				],
				"name": "setMerkleRoot",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "_value",
						"type": "bool"
					}
				],
				"name": "setNotTransferable",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bool",
						"name": "_state",
						"type": "bool"
					}
				],
				"name": "setPaused",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bool",
						"name": "_state",
						"type": "bool"
					}
				],
				"name": "setRevealed",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "_uriPrefix",
						"type": "string"
					}
				],
				"name": "setUriPrefix",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "_uriSuffix",
						"type": "string"
					}
				],
				"name": "setUriSuffix",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bool",
						"name": "_state",
						"type": "bool"
					}
				],
				"name": "setWhitelistMintEnabled",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "interfaceId",
						"type": "bytes4"
					}
				],
				"name": "supportsInterface",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "symbol",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "tokenURI",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "tokensOfOwner",
				"outputs": [
					{
						"internalType": "uint256[]",
						"name": "",
						"type": "uint256[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "start",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "stop",
						"type": "uint256"
					}
				],
				"name": "tokensOfOwnerIn",
				"outputs": [
					{
						"internalType": "uint256[]",
						"name": "",
						"type": "uint256[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalSupply",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "transferFrom",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "uriPrefix",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "uriSuffix",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "viewNFTCost",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "viewNotTransferable",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_mintAmount",
						"type": "uint256"
					},
					{
						"internalType": "bytes32[]",
						"name": "_merkleProof",
						"type": "bytes32[]"
					}
				],
				"name": "whitelistMint",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "whitelistMintEnabled",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "withdraw",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"approve(address,uint256)": {
					"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
				},
				"balanceOf(address)": {
					"details": "Returns the number of tokens in `owner`'s account."
				},
				"explicitOwnershipOf(uint256)": {
					"details": "Returns the `TokenOwnership` struct at `tokenId` without reverting. If the `tokenId` is out of bounds: - `addr = address(0)` - `startTimestamp = 0` - `burned = false` - `extraData = 0` If the `tokenId` is burned: - `addr = <Address of owner before token was burned>` - `startTimestamp = <Timestamp when token was burned>` - `burned = true` - `extraData = <Extra data when token was burned>` Otherwise: - `addr = <Address of owner>` - `startTimestamp = <Timestamp of start of ownership>` - `burned = false` - `extraData = <Extra data at start of ownership>`"
				},
				"explicitOwnershipsOf(uint256[])": {
					"details": "Returns an array of `TokenOwnership` structs at `tokenIds` in order. See {ERC721AQueryable-explicitOwnershipOf}"
				},
				"getApproved(uint256)": {
					"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
				},
				"isApprovedForAll(address,address)": {
					"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}."
				},
				"name()": {
					"details": "Returns the token collection name."
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"ownerOf(uint256)": {
					"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
				},
				"safeTransferFrom(address,address,uint256)": {
					"details": "Equivalent to `safeTransferFrom(from, to, tokenId, '')`."
				},
				"safeTransferFrom(address,address,uint256,bytes)": {
					"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
				},
				"setApprovalForAll(address,bool)": {
					"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
				},
				"supportsInterface(bytes4)": {
					"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified) to learn more about how these ids are created. This function call must use less than 30000 gas."
				},
				"symbol()": {
					"details": "Returns the token collection symbol."
				},
				"tokensOfOwner(address)": {
					"details": "Returns an array of token IDs owned by `owner`. This function scans the ownership mapping and is O(`totalSupply`) in complexity. It is meant to be called off-chain. See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into multiple smaller scans if the collection is large enough to cause an out-of-gas error (10K collections should be fine)."
				},
				"tokensOfOwnerIn(address,uint256,uint256)": {
					"details": "Returns an array of token IDs owned by `owner`, in the range [`start`, `stop`) (i.e. `start <= tokenId < stop`). This function allows for tokens to be queried if the collection grows too big for a single call of {ERC721AQueryable-tokensOfOwner}. Requirements: - `start < stop`"
				},
				"totalSupply()": {
					"details": "Returns the total number of tokens in existence. Burned tokens will reduce the count. To get the total number of tokens minted, please see {_totalMinted}."
				},
				"transferFrom(address,address,uint256)": {
					"details": "Transfers `tokenId` from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				}
			},
			"version": 1
		},
		"userdoc": {
			"errors": {
				"ApprovalCallerNotOwnerNorApproved()": [
					{
						"notice": "The caller must own the token or be an approved operator."
					}
				],
				"ApprovalQueryForNonexistentToken()": [
					{
						"notice": "The token does not exist."
					}
				],
				"BalanceQueryForZeroAddress()": [
					{
						"notice": "Cannot query the balance for the zero address."
					}
				],
				"InvalidQueryRange()": [
					{
						"notice": "Invalid query range (`start` >= `stop`)."
					}
				],
				"MintERC2309QuantityExceedsLimit()": [
					{
						"notice": "The `quantity` minted with ERC2309 exceeds the safety limit."
					}
				],
				"MintToZeroAddress()": [
					{
						"notice": "Cannot mint to the zero address."
					}
				],
				"MintZeroQuantity()": [
					{
						"notice": "The quantity of tokens minted must be more than zero."
					}
				],
				"OwnerQueryForNonexistentToken()": [
					{
						"notice": "The token does not exist."
					}
				],
				"OwnershipNotInitializedForExtraData()": [
					{
						"notice": "The `extraData` cannot be set on an unintialized ownership slot."
					}
				],
				"TransferCallerNotOwnerNorApproved()": [
					{
						"notice": "The caller must own the token or be an approved operator."
					}
				],
				"TransferFromIncorrectOwner()": [
					{
						"notice": "The token must be owned by `from`."
					}
				],
				"TransferToNonERC721ReceiverImplementer()": [
					{
						"notice": "Cannot safely transfer to a contract that does not implement the ERC721Receiver interface."
					}
				],
				"TransferToZeroAddress()": [
					{
						"notice": "Cannot transfer to the zero address."
					}
				],
				"URIQueryForNonexistentToken()": [
					{
						"notice": "The token does not exist."
					}
				]
			},
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/WomanSeekersNewDawn.sol": "WomanSeekersNewDawn"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/access/Ownable.sol": {
			"keccak256": "0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218",
			"license": "MIT",
			"urls": [
				"bzz-raw://fc980984badf3984b6303b377711220e067722bbd6a135b24669ff5069ef9f32",
				"dweb:/ipfs/QmPHXMSXj99XjSVM21YsY6aNtLLjLVXDbyN76J5HQYvvrz"
			]
		},
		"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
			"keccak256": "0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1",
			"license": "MIT",
			"urls": [
				"bzz-raw://41319e7f621f2dc3733511332c4fd032f8e32ad2aa7fd6f665c19741d9941a34",
				"dweb:/ipfs/QmcYR3bd862GD1Bc7jwrU9bGxrhUu5na1oP964bDCu2id1"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
			"license": "MIT",
			"urls": [
				"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
				"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
			]
		},
		"@openzeppelin/contracts/utils/Strings.sol": {
			"keccak256": "0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0",
			"license": "MIT",
			"urls": [
				"bzz-raw://b81d9ff6559ea5c47fc573e17ece6d9ba5d6839e213e6ebc3b4c5c8fe4199d7f",
				"dweb:/ipfs/QmPCW1bFisUzJkyjroY3yipwfism9RRCigCcK1hbXtVM8n"
			]
		},
		"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
			"keccak256": "0xcf688741f79f4838d5301dcf72d0af9eff11bbab6ab0bb112ad144c7fb672dac",
			"license": "MIT",
			"urls": [
				"bzz-raw://85d9c87a481fe99fd28a146c205da0867ef7e1b7edbe0036abc86d2e64eb1f04",
				"dweb:/ipfs/QmR7m1zWQNfZHUKTtqnjoCjCBbNFcjCxV27rxf6iMfhVtG"
			]
		},
		"@openzeppelin/contracts/utils/math/Math.sol": {
			"keccak256": "0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3",
			"license": "MIT",
			"urls": [
				"bzz-raw://cc8841b3cd48ad125e2f46323c8bad3aa0e88e399ec62acb9e57efa7e7c8058c",
				"dweb:/ipfs/QmSqE4mXHA2BXW58deDbXE8MTcsL5JSKNDbm23sVQxRLPS"
			]
		},
		"@openzeppelin/contracts/utils/math/SignedMath.sol": {
			"keccak256": "0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc",
			"license": "MIT",
			"urls": [
				"bzz-raw://c50fcc459e49a9858b6d8ad5f911295cb7c9ab57567845a250bf0153f84a95c7",
				"dweb:/ipfs/QmcEW85JRzvDkQggxiBBLVAasXWdkhEysqypj9EaB6H2g6"
			]
		},
		"contracts/DefaultOperatorFilterer.sol": {
			"keccak256": "0xe48ffd4600d880e8be33b5c34578b2e5747c421afdcb1c0da57d5ac8c75a6ed8",
			"license": "MIT",
			"urls": [
				"bzz-raw://0e2025c744882fa9772543088c963a142f6f48e86845f932a6265aae9caf8353",
				"dweb:/ipfs/QmatWMMxMUkntQHFD8GhbwfbM3sdquPrEoR2M3ZnicZEhk"
			]
		},
		"contracts/IOperatorFilterRegistry.sol": {
			"keccak256": "0xe14c74faf308e871911b2275e06799048bc0a59c5345fe1a2b74e0352f8b1225",
			"license": "MIT",
			"urls": [
				"bzz-raw://b01b99b1d7065d4171251c6a3eb5688219a64b3ab95dd84d2fcb3f665d3e1a33",
				"dweb:/ipfs/Qmc4TGBq4NWb2xw7Hg5stqUkTwk5pYxiPEkyHoVQ5fmy2G"
			]
		},
		"contracts/OperatorFilterer.sol": {
			"keccak256": "0xfc7b1129e138a9e9f0d36af3d24e31c3deb59e6b9ced2ed8c358cbc1cab230d8",
			"license": "MIT",
			"urls": [
				"bzz-raw://5d32a833b48cf3ec6c6b0aed9db7e788b497cb677978795e9a577d4643e7556d",
				"dweb:/ipfs/QmbMk6PsGtQkgxKeCPpSarwjsJPTzUfJH4zUVw67HLVT7X"
			]
		},
		"contracts/WomanSeekersNewDawn.sol": {
			"keccak256": "0x45e94068990edf8aafba45c93500a6bf89a17b374a10786679e253faecc24f6f",
			"license": "MIT",
			"urls": [
				"bzz-raw://45ec1b9941f25841ab8fe58aad90ff860c0d986c98dcd261eef9dfa19f3436e9",
				"dweb:/ipfs/QmdeGzathfuVmxy7T76suyrW8CTXKbhgw2vy6ZzX3JKrQK"
			]
		},
		"erc721a/contracts/ERC721A.sol": {
			"keccak256": "0x7ac2316d39837109434e59c4c3ade733dd96949ad58c8089df2191a785686f55",
			"license": "MIT",
			"urls": [
				"bzz-raw://f6e1ad0b3f1b898d3851c2e4b83a40de0d39ccdf75bad87fd7403a830b3eeafa",
				"dweb:/ipfs/QmaSd1nQ6cVWgWFN5fdQz2cnBsmnbyennkJSnFuwsFt6v4"
			]
		},
		"erc721a/contracts/IERC721A.sol": {
			"keccak256": "0xa31dfe2635a25f899e279befef27ffcc02fd16e636c58d4c251a303f2355f7ad",
			"license": "MIT",
			"urls": [
				"bzz-raw://284680b4fdbf52b2aa888f7988447568ee82c5d1585c1535d985ff25153bc3b9",
				"dweb:/ipfs/QmTWfDch6XJMwVLA4CY2pMedzrLWoN8ZdgYZ1UbRzesysz"
			]
		},
		"erc721a/contracts/extensions/ERC721AQueryable.sol": {
			"keccak256": "0xad83a36e9758f044317e9a5e2903bc49730b6d5de8fbe9a61b2f91fb4c2148c7",
			"license": "MIT",
			"urls": [
				"bzz-raw://b516fbe3026a9d529d359167c7f59d541c97369ff8c1f9e3698a669e43bb3205",
				"dweb:/ipfs/QmeUNVACjEnkz2D9JrzpGrNgVqJnQkYsWzY8UsHaAZWqtW"
			]
		},
		"erc721a/contracts/extensions/IERC721AQueryable.sol": {
			"keccak256": "0xc14fc938aecdccee7edbd3a3ce60b6171cdc3da3345cfa6d288c268983c48942",
			"license": "MIT",
			"urls": [
				"bzz-raw://d3e98fca40eb76d808b70410ff794373dd3d409aaf4ecc3c5bcf517172b20a84",
				"dweb:/ipfs/QmNzXKtrsUe17JYnQmp2jfZZaJwjmo14H4UsxTUV4uArdS"
			]
		}
	},
	"version": 1
}